{"ast":null,"code":"import { createFeatureSelector, createSelector, createReducer, on } from '@ngrx/store';\nimport * as fromActions from '../actions/course.actions';\nexport const initialState = {\n  courses: []\n};\nlet courses;\n\nconst _courseReducer = createReducer(initialState, on(fromActions.AddCourseAction, (state, {\n  payload\n}) => {\n  courses.push(payload);\n  return {\n    courses: courses\n  };\n}), on(fromActions.DeleteCourseAction, (state, {\n  payload\n}) => {\n  const _courses = state.courses.filter(o => o.id != payload);\n\n  return {\n    courses: _courses\n  };\n}), on(fromActions.UpdateCourseAction, (state, {\n  payload\n}) => {\n  const _courses = state.courses;\n\n  if (payload[0] == payload[1].id) {\n    const _course = _courses.find(o => o.id == payload[0]);\n\n    state.courses[state.courses.indexOf(_course)] = payload[1];\n  }\n\n  return {\n    courses: state.courses\n  };\n}), on(fromActions.SubscribeCourseAction, (state, {\n  payload\n}) => {\n  const _courses = state.courses;\n\n  const _course = _courses.find(o => o.id == payload[0].id);\n\n  const ind = state.courses.indexOf(_course);\n\n  _course.subscribers.push(payload[1]);\n\n  state.courses[ind] = _course;\n  return {\n    courses: state.courses\n  };\n}));\n\nexport function courseReducer(state, action) {\n  return _courseReducer(state, action);\n}\n;\nexport const getCourseState = createFeatureSelector('courseState');\nexport const getCourses = createSelector(getCourseState, state => state.courses);\nexport const _getCourses = createSelector(getCourseState, state => courses);","map":null,"metadata":{},"sourceType":"module"}