{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap, mergeMap, catchError, debounceTime } from 'rxjs/operators';\nimport * as fromActions from '../actions/tickets.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/tickets.service\";\nexport let TicketEffects = /*#__PURE__*/(() => {\n  class TicketEffects {\n    constructor(actions$, ticketserv) {\n      this.actions$ = actions$;\n      this.ticketserv = ticketserv;\n      this.loadTickets$ = createEffect(() => this.actions$.pipe(ofType(fromActions.LoadSupTicketsAction), debounceTime(1000), switchMap(() => this.ticketserv.getAlltickets().pipe(map(data => fromActions.LoadSupTicketSuccessAction({\n        payload: data\n      }))))));\n      this.createTicket$ = createEffect(() => this.actions$.pipe(ofType(fromActions.CreateSupTicketAction), map(action => action.payload), mergeMap(payload => this.ticketserv.createsupTicket(payload.ticket, payload.userid).pipe(map(res => fromActions.CreateSupTicketSuccessAction({\n        payload: res\n      })), catchError(err => of(fromActions.CreateSupTicketFailedAction({\n        payload: err\n      })))))));\n    }\n\n  }\n\n  TicketEffects.ɵfac = function TicketEffects_Factory(t) {\n    return new (t || TicketEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.TicketsService));\n  };\n\n  TicketEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TicketEffects,\n    factory: TicketEffects.ɵfac\n  });\n  return TicketEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}