{"ast":null,"code":"import { createFeatureSelector, createSelector, createReducer, on } from '@ngrx/store';\nimport { User } from '../models/user';\nimport * as fromActions from '../actions/auth.actions';\nlet user = User.fromobj({});\nexport const initialState = {\n  user: user,\n  errorMessage: \"\"\n};\n\nconst _authReducer = createReducer(initialState, on(fromActions.LoginAction, (state, {\n  payload\n}) => {\n  return Object.assign({}, state);\n}), on(fromActions.LoginSuccessAction, (state, {\n  payload\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    errorMessage: \"\",\n    user: payload\n  });\n}), on(fromActions.SignupAction, (state, {\n  payload\n}) => {\n  return Object.assign({}, state);\n}), on(fromActions.SignupSuccessAction, (state, {\n  payload\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    user: User.authenticatedUser(payload)\n  });\n}), on(fromActions.SignupFailureAction, (state, {\n  payload\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    errorMessage: payload\n  });\n}), on(fromActions.LoginFailureAction, (state, {\n  payload\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    errorMessage: payload\n  });\n}));\n\nexport function authReducer(state, action) {\n  return _authReducer(state, action);\n}\n;\nexport const getAuthState = createFeatureSelector('authState');\nexport const getUser = createSelector(getAuthState, state => state.user);\nexport const getMessage = createSelector(getAuthState, state => state.errorMessage);","map":null,"metadata":{},"sourceType":"module"}