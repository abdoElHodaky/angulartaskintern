{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport * as fromActions from '../actions/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/services/auth.service\";\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, authserv) {\n      this.actions$ = actions$;\n      this.authserv = authserv;\n      this.login$ = createEffect(() => this.actions$.pipe(ofType(fromActions.LoginAction), map(action => action.payload), mergeMap(payload => this.authserv.login(payload.useranme, payload.passwordHash).pipe(map(res => fromActions.LoginSuccessAction({\n        payload: res[\"user\"]\n      })), catchError(err => of(fromActions.LoginFailureAction({\n        payload: err\n      })))))));\n      this.register$ = createEffect(() => this.actions$.pipe(ofType(fromActions.SignupAction), map(action => action.payload), mergeMap(payload => this.authserv.signup(payload).pipe(map(res => fromActions.SignupSuccessAction({\n        payload: res\n      })), catchError(err => of(fromActions.SignupFailureAction({\n        payload: err\n      })))))));\n    }\n\n  }\n\n  AuthEffects.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService));\n  };\n\n  AuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}